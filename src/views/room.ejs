<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>ChismiSign</title>
  <link rel="icon" type="image/x-icon" href="img/ChismiSign-logo.png">
  <link rel="stylesheet" href="meet-style.css" />
  <script src="/socket.io/socket.io.js"></script>
  <script src="https://kit.fontawesome.com/c939d0e917.js"></script>
  <script src="https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js"></script>
  <link rel="stylesheet"
    href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,250,0,200" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
  <script src="https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js"
    integrity="sha512-CNgIRecGo7nphbeZ04Sc13ka07paqdeTu0WR1IM4kNcpmBAUSHSQX0FslNhTDadL4O5SAGapGt4FodqL8My0mA=="
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>
  <script>
    const ROOM_ID = "<%= roomId %>";
  </script>
  <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs"></script>
  <script src="https://cdn.jsdelivr.net/npm/@tensorflow-models/handpose"></script>
</head>

<body>
  <main>

    <div id="reactionsContainer">
    </div>

    <div class="chismisign animate__animated animate__slideInDown">
      <div class="logo-cont">
        <img class="logo" src="img/ChismiSign-logo.png">
        <div class="name-cont">
          <h1 class="app-title">ChismiSign</h1>
          <p class="app-author">by: Salinsenyas</p>
        </div>
      </div>
    </div>

    <div class="main-cont">

      <div class="main__middle__left">
        <div class="videos__group">
          <div id="video-grid">

          </div>
        </div>

        <div class="main__middle__right animate__animated animate__slideInRight" id="mainRight">

          <div class="main__chat_window">
            <section class="messages">
              <div class="popup-header">
                <p class="popup-title">Shared files</p>
                <button class="close-button" onclick="toggleSection('messages')">&#10006;</button>
              </div>
              <div class="chatLogs">
                <!-- Chat messages will be displayed here -->
              </div>
              <div class="input-msg">
                <div class="input-container">
                  <!-- <div class="message-container">
                    <input id="chat_message" class="chat_message" type="text" autocomplete="off"
                      placeholder="Type message here...">
                    <button id="send" class="send-button" onclick="sendMessage()">
                      <i class="fas fa-paper-plane"></i>
                    </button>
                  </div> -->
                  <div class="attach-container">
                    <input type="file" id="fileInput" onchange="handleFileSelect(event)" />
                    <button class="attach-btn" onclick="sendFile()"><i class="fas fa-paper-plane"></i></button>
                  </div>
                </div>
              </div>
            </section>
            <section class="meet-info">
              <div class="popup-header">
                <p class="popup-title">Meeting details</p>
                <button class="close-button" onclick="toggleSection('meet-info')">&#10006;</button>
              </div>
              <div class="joining-info">
                <p class="joining-info-title">Joining info</p>
                <div class="link-container">
                  <input type="text" id="meeting-url" readonly>
                  <button class="copy-button" onclick="copyMeetingUrl()">
                    <span class="material-symbols-outlined link-icon">content_copy</span>
                    Copy joining info
                  </button>
                </div>
                <hr class="dashed-2">
                <p class="qr-info-title">Scan QR to join</p>
                <div class="codecontainer">
                  <div class="qrcode-container">
                    <div id="qrcode"></div>
                  </div>
                </div>
              </div>
            </section>
          </div>
        </div>
      </div>

      <div class="options animate__animated animate__bounceInUp">
        <div class="options__left">
          <div class="current-time-code" id="current-time">
          </div>
        </div>

        <div class="options__middle">
          <button id="muteButton" class="options__button">
            <i class="fa fa-microphone"></i>
          </button>
          <button id="stopVideo" class="options__button">
            <i class="fa fa-video-camera"></i>
          </button>
          <button class="options__button end-call">
            <span class="material-symbols-outlined">call_end</span>
          </button>
          <div class="reactions-container">
            <button class="options__button reactions-btn" onclick="toggleReactions()">
              <span class="material-symbols-outlined">insert_emoticon</span>
            </button>
            <div class="reactions-popup" id="reactionsPopup">
              <button class="animate__animated animate__tada" onclick="sendReaction('Heart')">
                <img src="img/reactions/favorite.png" alt="Favorite">
              </button>
              <button class="animate__animated animate__tada" onclick="sendReaction('Thumbs_up')">
                <img src="img/reactions/likeEmoji.png" alt="Thumbs Up">
              </button>
              <button class="animate__animated animate__tada" onclick="sendReaction('Clap')">
                <img src="img/reactions/hands.png" alt="Clap">
              </button>
              <button class="animate__animated animate__tada" onclick="sendReaction('Laughing')">
                <img src="img/reactions/laugh.png" alt="Laugh">
              </button>
              <button class="animate__animated animate__tada" onclick="sendReaction('Wow')">
                <img src="img/reactions/wow.png" alt="Wow">
              </button>
              <button class="animate__animated animate__tada" onclick="sendReaction('Sad')">
                <img src="img/reactions/sad-face.png" alt="Sad">
              </button>
            </div>
            <div class="reactions-popup-deaf" id="reactionsPopupDeaf">
              <button class="animate__animated animate__tada" onclick="sendReaction('Deaf-heart')">
                <img src="img/reactions/deaf-heart-img.png" alt="Heart">
              </button>
              <button class="animate__animated animate__tada">
                <img src="img/reactions/likeEmoji.png" alt="Thumbs Up" onclick="sendReaction('Thumbs_up')">
              </button>
              <button class="animate__animated animate__tada" onclick="sendReaction('Deaf-clap')">
                <img src="img/reactions/deaf-clap-img.png" alt="Clap">
              </button>
              <button class="animate__animated animate__tada" onclick="sendReaction('Laughing')">
                <img src="img/reactions/laugh.png" alt="Laugh">
              </button>
              <button class="animate__animated animate__tada" onclick="sendReaction('Wow')">
                <img src="img/reactions/wow.png" alt="Wow">
              </button>
              <button class="animate__animated animate__tada" onclick="sendReaction('Sad')">
                <img src="img/reactions/sad-face.png" alt="Sad">
              </button>
            </div>
          </div>
          <button id="presentButton" class="options__button">
            <span class="material-symbols-outlined">screen_share</span>
          </button>
        </div>

        <div class="options__right">
          <button id="infoButton" class="options__button no-fill" onclick="toggleSection('meet-info')">
            <span class="material-symbols-outlined">
              info
            </span>
          </button>
          <button id="chatButton" class="options__button no-fill" onclick="toggleSection('messages')">
            <span class="material-symbols-outlined">
              mms
            </span>
          </button>
        </div>

      </div>

    </div>
  </main>
</body>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
  const socket = io("/");
  const videoGrid = document.getElementById("video-grid");
  const myVideo = document.createElement("video");
  myVideo.muted = true;
  const peers = {};

  const queryParams = new URLSearchParams(window.location.search);
  const user = queryParams.get('displayName');

  var peer = new Peer({
    host: '127.0.0.1',
    port: 3000,
    path: '/peerjs',
    config: {
      'iceServers': [
        { url: 'stun:stun01.sipphone.com' },
        { url: 'stun:stun.ekiga.net' },
        { url: 'stun:stunserver.org' },
        { url: 'stun:stun.softjoys.com' },
        { url: 'stun:stun.voiparound.com' },
        { url: 'stun:stun.voipbuster.com' },
        { url: 'stun:stun.voipstunt.com' },
        { url: 'stun:stun.voxgratia.org' },
        { url: 'stun:stun.xten.com' },
        {
          url: 'turn:192.158.29.39:3478?transport=udp',
          credential: 'JZEOEt2V3Qb0y27GRntt2u2PAYA=',
          username: '28224511:1379330808'
        },
        {
          url: 'turn:192.158.29.39:3478?transport=tcp',
          credential: 'JZEOEt2V3Qb0y27GRntt2u2PAYA=',
          username: '28224511:1379330808'
        }
      ]
    },

    debug: 3
  });

  let myVideoStream;
  navigator.mediaDevices
    .getUserMedia({
      audio: true,
      video: true,
    })
    .then((stream) => {
      myVideoStream = stream;
      addVideoStream(myVideo, stream, user);

      peer.on("call", (call) => {
        console.log('someone call me');
        call.answer(stream);
        const video = document.createElement("video");
        call.on("stream", (userVideoStream) => {
          addVideoStream(video, userVideoStream);
        });
      });

      socket.on("user-connected", (userId, userName) => {
        connectToNewUser(userId, stream, userName);
        console.log('User connected:', user);
      });

      socket.on("user-disconnected", (userId) => {
        if (peers[userId]) peers[userId].close()
      });

    });

  const addVideoStream = (video, stream) => {
    video.srcObject = stream;
    video.addEventListener("loadedmetadata", () => {
      video.play();
      videoGrid.append(video);
    });
  };

  const connectToNewUser = (userId, stream) => {
    console.log('I call someone' + userId);
    const call = peer.call(userId, stream);
    const video = document.createElement("video");
    call.on("stream", (userVideoStream) => {
      addVideoStream(video, userVideoStream);
    });

    call.on("close", () => {
      video.remove();
    });

    peers[userId] = call;
  };

  peer.on("open", (id) => {
    console.log('my id is' + id);
    socket.emit("join-room", ROOM_ID, id, user);
  });

  let text = document.querySelector("#chat_message");
  let send = document.getElementById("send");
  let messages = document.querySelector(".chatLogs");
  let unreadMessages = 0;
  let sentMessage = false;

  // send.addEventListener("click", (e) => {
  //   if (text.value.length !== 0) {
  //     socket.emit("message", text.value);
  //     text.value = "";
  //     sentMessage = true;
  //   }
  // });

  // text.addEventListener("keydown", (e) => {
  //   if (e.key === "Enter" && text.value.length !== 0) {
  //     socket.emit("message", text.value);
  //     text.value = "";
  //     sentMessage = true;
  //   }
  // });

  const muteButton = document.querySelector("#muteButton");
  const stopVideo = document.querySelector("#stopVideo");
  muteButton.addEventListener("click", () => {
    const enabled = myVideoStream.getAudioTracks()[0].enabled;
    if (enabled) {
      myVideoStream.getAudioTracks()[0].enabled = false;
      html = `<i class="fas fa-microphone-slash"></i>`;
      muteButton.classList.toggle("background__red");
      muteButton.innerHTML = html;
    } else {
      myVideoStream.getAudioTracks()[0].enabled = true;
      html = `<i class="fas fa-microphone"></i>`;
      muteButton.classList.toggle("background__red");
      muteButton.innerHTML = html;
    }
  });

  document.querySelector(".end-call").addEventListener("click", () => {
    peer.disconnect();
    window.location.href = "http://localhost:5173/Calls";
  });

  stopVideo.addEventListener("click", () => {
    const enabled = myVideoStream.getVideoTracks()[0].enabled;
    if (enabled) {
      myVideoStream.getVideoTracks()[0].enabled = false;
      html = `<i class="fas fa-video-slash"></i>`;
      stopVideo.classList.toggle("background__red");
      stopVideo.innerHTML = html;
    } else {
      myVideoStream.getVideoTracks()[0].enabled = true;
      html = `<i class="fas fa-video"></i>`;
      stopVideo.classList.toggle("background__red");
      stopVideo.innerHTML = html;
    }
  });

  function createReaction(reaction, userName) {
    const reactionContainer = document.createElement('div');
    reactionContainer.classList.add('reaction-container');

    const reactionElement = document.createElement('img');
    reactionElement.src = `img/animated-reactions/${reaction}.gif`;
    reactionElement.classList.add('reaction');

    const senderElement = document.createElement('div');
    senderElement.classList.add('reaction-name');
    senderElement.textContent = userName;

    reactionContainer.appendChild(reactionElement);
    reactionContainer.appendChild(senderElement);

    const mainContainer = document.querySelector('.main-cont');
    const mainWidth = mainContainer.offsetWidth;
    const mainHeight = mainContainer.offsetHeight;
    const reactionWidth = 200;
    const reactionHeight = 200;

    let collisionDetected = false;
    let randomX, randomY;

    do {
      randomX = Math.random() * (mainWidth - reactionWidth);
      randomY = Math.random() * (mainHeight - reactionHeight);

      const existingReactions = document.querySelectorAll('.reaction-container');
      collisionDetected = Array.from(existingReactions).some((existingReaction) => {
        const existingRect = existingReaction.getBoundingClientRect();
        const newRect = {
          left: randomX,
          top: randomY,
          right: randomX + reactionWidth,
          bottom: randomY + reactionHeight,
        };
        return (
          newRect.left < existingRect.right &&
          newRect.right > existingRect.left &&
          newRect.top < existingRect.bottom &&
          newRect.bottom > existingRect.top
        );
      });
    } while (collisionDetected);

    reactionContainer.style.left = `${randomX}px`;
    reactionContainer.style.top = `${randomY}px`;

    document.getElementById('reactionsContainer').appendChild(reactionContainer);

    setTimeout(() => {
      reactionContainer.remove();
    }, 3000);
  }

  socket.on("receiveReaction", (reaction, userName) => {
    console.log('Receiving reaction:', reaction, userName);
    createReaction(reaction, userName);
  });

  socket.on("send-file", function ({ fileData, fileName, fileType, userName }) {
    saveFileFromBinary(fileData, fileName, fileType, userName);
  });

  socket.on("receive-file", function ({ fileData, fileName, fileType, userName }) {
    saveFileFromBinary(fileData, fileName, fileType, userName);
    console.log('File received');
  });

  let selectedFile = null;

  function handleFileSelect(event) {
    const file = event.target.files[0];
    selectedFile = file;
  }

  function sendFile() {
    if (selectedFile) {
      const reader = new FileReader();
      reader.readAsArrayBuffer(selectedFile);
      reader.onload = function () {
        const fileData = reader.result;
        const fileName = selectedFile.name;
        const fileType = selectedFile.type;
        const userName = user;
        const filePreview = createFilePreview(selectedFile);

        appendFilePreviewToChat(filePreview, fileName, userName);
        socket.emit("send-file", { fileData, fileName, fileType, userName });

        selectedFile = null;
        document.getElementById('fileInput').value = '';
      };
      reader.onerror = function (error) {
        console.log('Error:', error);
      };
    } else {
      console.log('No file selected');
    }
  }

  function createFilePreview(file) {
    if (file.type.startsWith('image/')) {
      const filePreview = document.createElement('img');
      filePreview.classList.add('file-preview');
      filePreview.file = file;
      const reader = new FileReader();
      reader.onload = (function (aImg) {
        return function (e) {
          aImg.src = e.target.result;
        };
      })(filePreview);
      reader.readAsDataURL(file);
      return filePreview;
    } else {
      const filePreview = document.createElement('div');
      filePreview.classList.add('file-preview');
      filePreview.textContent = 'File: ' + file.name;
      return filePreview;
    }
  }

  function appendFilePreviewToChat(filePreview, fileName, userName) {
    const messageContainer = document.createElement('div');
    messageContainer.classList.add('message');

    const senderInfo = document.createElement('div');
    senderInfo.classList.add('sender-info');

    const senderName = document.createElement('span');
    senderName.classList.add('sender-name');
    senderName.textContent = userName === user ? "Me" : userName;

    const timeInfo = document.createElement('span');
    timeInfo.classList.add('time');
    const currentTime = new Date();
    timeInfo.textContent = currentTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

    const messageText = document.createElement('span');
    messageText.classList.add('message-text');
    messageText.appendChild(filePreview);

    senderInfo.appendChild(senderName);
    senderInfo.appendChild(timeInfo);

    messageContainer.appendChild(senderInfo);
    messageContainer.appendChild(messageText);

    messages.appendChild(messageContainer);

    messages.scrollTop = messages.scrollHeight;
  }

  function saveFileFromBinary(binaryData, fileName, fileType, userName) {
    const blob = new Blob([binaryData], { type: fileType });
    const url = URL.createObjectURL(blob);

    const downloadLink = document.createElement('a');
    downloadLink.href = url;
    downloadLink.download = fileName;
    downloadLink.textContent = fileName;
    downloadLink.style.cursor = 'pointer';

    socket.emit("file-message", fileName);

    setTimeout(() => {
      URL.revokeObjectURL(url);
    }, 60000);

    const messageContainer = document.createElement('div');
    messageContainer.classList.add('message');

    const senderInfo = document.createElement('div');
    senderInfo.classList.add('sender-info');

    const senderName = document.createElement('span');
    senderName.classList.add('sender-name');
    senderName.textContent = userName === user ? "Me" : userName;

    const timeInfo = document.createElement('span');
    timeInfo.classList.add('time');
    const currentTime = new Date();
    timeInfo.textContent = currentTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

    const messageText = document.createElement('span');
    messageText.classList.add('message-text');

    messageText.appendChild(downloadLink);

    const filePreview = createFilePreview(new File([binaryData], fileName, { type: fileType }));
    messageText.appendChild(filePreview);

    senderInfo.appendChild(senderName);
    senderInfo.appendChild(timeInfo);

    messageContainer.appendChild(senderInfo);
    messageContainer.appendChild(messageText);

    messages.appendChild(messageContainer);

    messages.scrollTop = messages.scrollHeight;

    return messageContainer;
  }

  // let lastMessageSender = '';
  // let lastMessageTime = '';
  // let lastMessageContainer = null;

  // socket.on("createMessage", (message, userName) => {
  //   const currentTime = new Date();
  //   const currentTimeString = currentTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

  //   if (userName === lastMessageSender && currentTimeString === lastMessageTime) {
  //     const messageText = document.createElement('span');
  //     messageText.classList.add('message-text');
  //     messageText.textContent = message;

  //     lastMessageContainer.appendChild(messageText);
  //   } else {
  //     const messageContainer = document.createElement('div');
  //     messageContainer.classList.add('message');

  //     const senderInfo = document.createElement('div');
  //     senderInfo.classList.add('sender-info');

  //     const senderName = document.createElement('span');
  //     senderName.classList.add('sender-name');
  //     senderName.textContent = userName === user ? "Me" : userName;

  //     const timeInfo = document.createElement('span');
  //     timeInfo.classList.add('time');
  //     timeInfo.textContent = currentTimeString;

  //     const messageText = document.createElement('span');
  //     messageText.classList.add('message-text');
  //     messageText.textContent = message;

  //     senderInfo.appendChild(senderName);
  //     senderInfo.appendChild(timeInfo);

  //     messageContainer.appendChild(senderInfo);
  //     messageContainer.appendChild(messageText);

  //     messages.appendChild(messageContainer);
  //     lastMessageContainer = messageContainer;
  //   }

  //   messages.scrollTop = messages.scrollHeight;

  //   if (!sentMessage) {
  //     const isChatWindowOpen = document.querySelector('.main__chat_window').style.display === 'flex';
  //     if (!isChatWindowOpen) {
  //       updateUnreadMessageCount(unreadMessages + 1);
  //     }
  //   }
  //   sentMessage = false;

  //   lastMessageSender = userName;
  //   lastMessageTime = currentTimeString;
  // });

  function toggleReactions() {
    const button = document.querySelector(".reactions-btn");
    const popup = document.getElementById("reactionsPopup");
    const deafPopup = document.getElementById("reactionsPopupDeaf");

    const urlParams = new URLSearchParams(window.location.search);
    const joinAs = urlParams.get('joinAs');

    if (joinAs === 'Deaf') {
      if (deafPopup.classList.contains("show")) {
        deafPopup.classList.remove("show");
        button.classList.remove("active");
      } else {
        deafPopup.classList.add("show");
        button.classList.add("active");
      }
      popup.classList.remove("show");
    } else {
      if (popup.classList.contains("show")) {
        popup.classList.remove("show");
        button.classList.remove("active");
      } else {
        popup.classList.add("show");
        button.classList.add("active");
      }
      deafPopup.classList.remove("show");
    }
  }

  function sendReaction(reaction) {
    const userName = user;
    createReaction(reaction, userName);
    socket.emit("reaction", reaction, userName);
  }

  function updateUnreadMessageCount(count) {
    unreadMessages = count;
    const chatButton = document.getElementById("chatButton");
    if (unreadMessages > 0) {
      chatButton.innerHTML = `<span class="material-symbols-outlined">mms</span> <div class="unread-messages-count">${unreadMessages}</div>`;
    } else {
      chatButton.innerHTML = `<span class="material-symbols-outlined">mms</span>`;
    }
  }

  function generateQRCode() {
    var meetingUrlInput = document.getElementById('meeting-url');
    var meetingUrl = meetingUrlInput.value;

    var qrCodeContainer = document.getElementById('qrcode');
    qrCodeContainer.innerHTML = '';

    var qrCode = new QRCode(qrCodeContainer, {
      text: meetingUrl,
      width: 150,
      height: 150,
      colorDark: "#000",
      colorLight: "#fff",
      correctLevel: QRCode.CorrectLevel.H,
    });
  }

  document.addEventListener("DOMContentLoaded", function () {
    generateQRCode();
  });

  function copyMeetingUrl() {
    var meetingUrlInput = document.getElementById('meeting-url');
    meetingUrlInput.select();
    document.execCommand('copy');

    meetingUrlInput.blur();

    Swal.fire({
      icon: 'success',
      title: 'Copied!',
      text: 'Meeting URL copied to clipboard',
      showConfirmButton: false,
      timer: 1500
    });
  }

  function toggleSection(sectionId) {
    var mainRight = document.getElementById("mainRight");
    var sections = document.querySelectorAll('.main__chat_window section');
    var buttons = document.querySelectorAll('.options__button');

    var isActive = mainRight.style.display === "flex";
    var activeSectionId = "";
    var isSectionOpen = false;

    sections.forEach(function (section) {
      if (section.style.display === "flex") {
        activeSectionId = section.classList[0];
        if (activeSectionId === sectionId) {
          isSectionOpen = true;
        }
      }
    });

    buttons.forEach(function (button) {
      button.classList.remove('active');
    });

    var activeButtonId = sectionId === 'meet-info' ? 'infoButton' : 'chatButton';
    document.getElementById(activeButtonId).classList.add('active');
    var isChatButtonActive = document.getElementById('chatButton').classList.contains('active');

    if (isActive && isSectionOpen && (activeButtonId === 'chatButton' || activeButtonId === 'infoButton')) {
      mainRight.style.display = "none";
      buttons.forEach(function (button) {
        button.classList.remove('active');
      });
      if (sectionId === 'messages') {
        updateUnreadMessageCount(0);
      }
    } else {
      if (!isActive) {
        mainRight.style.display = "flex";
        if (sectionId === 'messages') {
          updateUnreadMessageCount(0);
        }
      }
    }

    sections.forEach(function (section) {
      if (section.classList.contains(sectionId)) {
        section.style.display = 'flex';
      } else {
        section.style.display = 'none';
      }
    });
  }

  function updateTimeAndCode() {
    var now = new Date();

    var hours = now.getHours();
    var meridiem = hours >= 12 ? 'PM' : 'AM';
    hours = hours % 12;
    hours = hours ? hours : 12;

    var minutes = now.getMinutes();
    minutes = minutes < 10 ? '0' + minutes : minutes;

    var currentTimeString = hours + ':' + minutes + ' ' + meridiem;

    var urlParts = window.location.href.split('/');
    var lastPart = urlParts[urlParts.length - 1];
    var meetingCode = lastPart.split('?')[0];

    if (meetingCode) {
      var fullContent = currentTimeString + "   |   " + meetingCode;
      document.getElementById('current-time').textContent = fullContent;

      var meetingURL = window.location.origin + '/' + meetingCode;
      document.getElementById('meeting-url').value = meetingURL;
    } else {
      document.getElementById('current-time').textContent = "Meeting Code not found | " + currentTimeString;
    }
  }

  async function runHandpose() {
    const net = await handpose.load();
    console.log('Handpose model loaded.');
    detectSign(net);
  }

  async function detectSign(net) {

    setInterval(async () => {
      const video = document.querySelector('video');
      const handData = await net.estimateHands(video);

      if (handData.length > 0) {
        document.querySelector('#video-grid').style.borderColor = '#15E8D8';
        socket.emit('gesture-detected', 'blue');
      } else {
        document.querySelector('#video-grid').style.borderColor = 'rgba(220, 220, 220, 0.1)';
      }
    }, 100);
  }

  socket.on('receive-gesture', (gesture, userName) => {
    console.log(`Received gesture "${gesture}" from ${userName}`);
    document.querySelector('#video-grid').style.borderColor = '#15E8D8';
  });

  runHandpose();
  updateTimeAndCode();
  setInterval(updateTimeAndCode, 1000);
</script>

</html>